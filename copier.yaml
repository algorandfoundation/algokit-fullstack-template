_subdirectory: ./template_content

_tasks:
  - "echo '==== 1/4 - Initializing base template ===='"
  - 'algokit init --template-url gh:algorandfoundation/algokit-base-template -n . --no-git --no-ide --no-bootstrap -a use_default_readme false'

  - "echo '==== 2/4 - Initializing frontend template ===='"
  # TODO: temporary changes below, revert back to official branch upon merging
  - "algokit init --template-url gh:algorandfoundation/algokit-react-frontend-template --template-url-ref=poc/wizard_v2 -n {{ project_name }}-app --no-git --no-ide --no-bootstrap
    -a author_email '{{ author_email }}'
    -a author_name '{{ author_name }}'
    -a preset_name {{ preset_name }}
    -a use_github_actions 'no'"

  - "echo '==== 3/4 - Initializing backend template ===='"
  # TODO: temporary changes below, revert back to official branch upon merging
  - "algokit init --template-url gh:{% if contract_template == 'tealscript' %}algorand-devrel/tealscript-algokit-template{% elif contract_template == 'beaker' %}algorandfoundation/algokit-beaker-default-template --template-url-ref=feat/wizard_v2{% else %}algorandfoundation/algokit-puya-template --template-url-ref=poc/wizard_v2{% endif %} -n {{ project_name }}-contracts --no-git --no-ide --no-bootstrap
    -a author_email '{{ author_email }}'
    -a author_name '{{ author_name }}'
    -a preset_name {{ preset_name }}
    -a contract_name {{ contract_name }}
    -a deployment_language {{ deployment_language }}
    -a use_github_actions 'no'
    -a use_pre_commit 'no'"

  - "echo '==== 4/4 - Finalizing setup ===='"
  - '{{ python_path if python_path else _copier_python }} inject.py "./projects/{{ project_name }}-contracts" "./projects/{{ project_name }}-app"'
  # _copier_python above is used for backwards compatibility with versions < v1.11.3 of the algokit cli

# questions
contract_template:
  type: str
  help: Choose the contract template.
  when: false
  choices:
    'Puya Template': puya
    'TealScript Template': tealscript
    'Beaker Framework': beaker
  default: puya

# project_name should never get prompted, AlgoKit should always pass it by convention
project_name:
  type: str
  help: Name for this project.
  placeholder: 'algorand-app'
  default: 'myproject'

# Auto determined by algokit-cli from v1.11.3 to allow execution of python script
# in binary mode.
python_path:
  type: str
  help: Path to the sys.executable.
  when: false

preset_name:
  type: str
  help: Name of the preset to use. Starter is optimal for simpler projects, Production is optimal for more complex projects that require CI/CD and other features, Custom for user-defined settings.
  choices:
    Starter: 'starter'
    Production: 'production'
    Custom: 'custom'
  default: 'starter'

contract_name:
  type: str
  help: Name of the default smart contract app.
  placeholder: 'hello_world'
  default: 'hello_world'
  validator: >-
    {% if not (contract_name | regex_search('^[a-z]+(?:_[a-z]+)*$')) %}
    contract_name must be formatted in snake case.
    {% endif %}

author_name:
  type: str
  help: Package author name
  placeholder: 'Your Name'
  default: 'Your Name'

author_email:
  type: str
  help: Package author email
  placeholder: 'your@email.tld'
  default: 'your@email.tld'

deployment_language:
  type: str
  help: Pick language for deployment scripts in the backend?
  choices:
    Python: 'python'
    TypeScript: 'typescript'
  default: 'python'

ide_vscode:
  type: bool
  help: Do you want to add VSCode configuration?
  when: "{{ preset_name == 'custom' }}"
  default: "{{ 'yes' if preset_name == 'production' else 'no' }}"

ide_jetbrains:
  type: bool
  help: Do you want to add JetBrains configuration (`frontend` optimized for WebStorm, `backend` for PyCharm CE)?
  when: "{{ preset_name == 'custom' }}"
  default: no

use_python_pytest:
  type: bool
  when: "{{ deployment_language == 'python' and preset_name == 'custom' }}"
  help: Do you want to include unit tests for smart contracts (via pytest)?
  default: "{{ 'yes' if preset_name == 'production' else 'no' }}"

python_linter:
  type: str
  help: Do you want to use a Python linter on smart contracts codebase?
  when: "{{ preset_name == 'custom' }}"
  choices:
    Ruff: 'ruff'
    Flake8: 'flake8'
    No thanks: 'none'
  default: "{{ 'ruff' if preset_name == 'production' else 'none' }}"

use_python_black:
  type: bool
  help: Do you want to use a Python formatter (via Black) on smart contracts codebase?
  when: "{{ preset_name == 'custom' }}"
  default: "{{ 'yes' if preset_name == 'production' else 'no' }}"

use_python_mypy:
  type: bool
  help: Do you want to use a Python type checker (via mypy) on smart contracts codebase?
  when: "{{ preset_name == 'custom' }}"
  default: "{{ 'yes' if preset_name == 'production' else 'no' }}"

use_python_pip_audit:
  type: bool
  help: Do you want to include Python dependency vulnerability scanning for smart contracts (via pip-audit)?
  when: "{{ preset_name == 'custom' }}"
  default: "{{ 'yes' if preset_name == 'production' else 'no' }}"

use_dispenser:
  type: bool
  when: "{{ preset_name == 'custom' }}"
  help: Do you want to fund your deployment account using an optional dispenser account?
  default: "{{ 'yes' if preset_name == 'production' else 'no' }}"

use_github_actions:
  type: bool
  help: Do you want to include Github Actions workflows for build and testnet deployment?
  when: "{{ preset_name == 'custom' }}"
  default: "{{ 'yes' if preset_name == 'production' else 'no' }}"

use_pre_commit:
  type: bool
  when: "{{ preset_name == 'custom' }}"
  help: Do you want to include pre-commit for linting, type checking and formatting?
  default: "{{ 'yes' if preset_name == 'production' else 'no' }}"

cloud_provider:
  type: str
  help: Pick your website hosting provider for continuous delivery
  when: "{{ use_github_actions != false and preset_name == 'custom' }}"
  choices:
    Netlify: 'netlify'
    Vercel: 'vercel'
    Skip CD setup: 'none'
  default: "{{ 'netlify' if preset_name == 'production' else 'none' }}"
